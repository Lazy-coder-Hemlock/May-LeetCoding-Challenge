#first bad version


// The API isBadVersion is defined for you.
// bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n) {
        int start=1;
        int end=n;
        while(start<end){
            int mid=start+(end-start)/2;
            if(isBadVersion(mid)){
                end=mid;
            }
            else
                start=mid+1;
        }
        return start;
    }
};



#jewels and stones
class Solution {
public:
    int numJewelsInStones(string J, string S) {
        int res=0;
        for(auto i:J)
            res+=count(S.begin(),S.end(),i);
        return res;
    }
};


#Ransom Note

class Solution {
public:
    bool canConstruct(string ransomNote, string magazine){
        vector<char>mag(magazine.begin(),magazine.end());
        for(char i:ransomNote){
            vector<char>::iterator it;
            it=find(mag.begin(),mag.end(),i);
            if(it!=mag.end()){
                int store=it-mag.begin();
                mag.erase(mag.begin()+store);
            }
            else{
                return false;
            }
        }
    return true;
    }
};


#Number Complement

class Solution:
    def findComplement(self, num: int) -> int:
        c=bin(num)[2:]
        l=[i for i in c]
        for i in range(len(l)):
            n=int(l[i])
            conv=1-n
            l[i]=str(conv)
        digi=int(''.join(l),2)
        return digi

#First Unique Character in a String

class Solution {
public:
    int firstUniqChar(string s) {
     int freq[26]={0};
        for(int i=0;i<s.length();i++)freq[s[i]-'a']++;
        for(int i=0;i<s.length();i++){
            if(freq[s[i]-'a']==1)
                return i;
        }
        return -1;
    }
};

#Majority Element

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        map<int,int>m;
        int res=INT_MIN;
        for(int i=0;i<nums.size();i++)m[nums[i]]++;
        int store=0;
        for(auto i:m){
            if(i.second>res){
                res=i.second;
                store=i.first;
            }
        }
        return store;
    }
};

#cousins in binary tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int A, int B) {
        queue<TreeNode*>q;
        if(!root)
            return false;
        q.push(root);
        while(!q.empty()){
            bool aexist=false;
            bool bexist=false;
            int size=q.size();
            for(int i=0;i<size;i++){
                auto node=q.front();
                q.pop();
                if(node->val==A)aexist=true;
                if(node->val==B)bexist=true;
                if(node->left!=NULL && node->right!=NULL){
                    if(node->left->val==A && node->right->val==B)
                        return false;
                if(node->left->val==B && node->right->val==A)
                    return false;
                }
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
            }
            if(aexist && bexist)return true;
        }
        return false;
    }
};
