#first bad version


// The API isBadVersion is defined for you.
// bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n) {
        int start=1;
        int end=n;
        while(start<end){
            int mid=start+(end-start)/2;
            if(isBadVersion(mid)){
                end=mid;
            }
            else
                start=mid+1;
        }
        return start;
    }
};



#jewels and stones
class Solution {
public:
    int numJewelsInStones(string J, string S) {
        int res=0;
        for(auto i:J)
            res+=count(S.begin(),S.end(),i);
        return res;
    }
};


#Ransom Note

class Solution {
public:
    bool canConstruct(string ransomNote, string magazine){
        vector<char>mag(magazine.begin(),magazine.end());
        for(char i:ransomNote){
            vector<char>::iterator it;
            it=find(mag.begin(),mag.end(),i);
            if(it!=mag.end()){
                int store=it-mag.begin();
                mag.erase(mag.begin()+store);
            }
            else{
                return false;
            }
        }
    return true;
    }
};
