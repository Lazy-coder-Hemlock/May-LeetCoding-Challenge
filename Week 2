#check if it is a straight Line

class Solution:
    def checkStraightLine(self, coordinates: List[List[int]]) -> bool:
        if len(coordinates)==2:
            return 1
        x0,y0=coordinates[0]
        x1,y1=coordinates[1]
        for i in range(2,len(coordinates)):
            x,y=coordinates[i]
            if (y1-y0)*(x-x0)!=(x1-x0)*(y-y0):
                return 0
        return 1


#Valid perfect square
#define ll long 
class Solution {
public:
    bool isPerfectSquare(int num) {
        ll low=0;
        ll high=num;
        while(low<=high){
            ll mid=low+(high-low)/2;
            ll curr_square=mid*mid;
            if(curr_square==num)
                return 1;
            else if (curr_square<num)
                low=mid+1;
            else
                high=mid-1;
        }
        return 0;
    }
};


#Find the town Judge

class Solution:
    def findJudge(self, N: int, trust: List[List[int]]) -> int:
        if len(trust)<N-1:
            return -1
        inward=[0]*(N+1)
        outward=[0]*(N+1)
        for k,v in trust:
            inward[v]+=1
            outward[k]+=1
        for i in range(1,N+1):
            if inward[i]==N-1 and outward[i]==0:
                return i
        return -1

#flood fill algorithm

class Solution {
    void dfs(vector<vector<int>>&image,int sr,int sc,int new_color,int rows,int cols,int source){
        if(sr<0 || sr>=rows || sc<0 || sc>=cols)
            return;
        else if(image[sr][sc]!=source)
            return;
        image[sr][sc]=new_color;
        dfs(image,sr-1,sc,new_color,rows,cols,source);
        dfs(image,sr+1,sc,new_color,rows,cols,source);
        dfs(image,sr,sc-1,new_color,rows,cols,source);
        dfs(image,sr,sc+1,new_color,rows,cols,source);
        
    }
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        if(newColor==image[sr][sc])
            return image;
        int rows=image.size();
        int cols=image[0].size();
        int source=image[sr][sc];
        dfs(image,sr,sc,newColor,rows,cols,source);
        return image;
    }
    
};

#Single Element in a Sorted Array

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        return reduce(xor,nums)
        
#Remove K digits

class Solution {
public:
    string removeKdigits(string num, int k) {
       // int num=nums.size();
        stack<char>st;
        for(char c:num){
            while(!st.empty() && k>0 && st.top()>c){
                st.pop();
                k--;
            }
            if(!st.empty() || c!='0')
                st.push(c);
        }
        while(!st.empty() && k--)
            st.pop();
        if(st.empty())
            return "0";
        string res="";
        while(!st.empty()){
            res+=st.top();
            st.pop();
        }
        reverse(res.begin(),res.end());
        return res;
    }
};


#Implement Trie
class Trie:

    def __init__(self):
        self.stack=[]
        """
        Initialize your data structure here.
        """
        

    def insert(self, word: str) -> None:
        self.stack.append(word)
        """
        Inserts a word into the trie.
        """
        

    def search(self, word: str) -> bool:
        if word in self.stack:
            return True
        return False
        """
        Returns if the word is in the trie.
        """
        

    def startsWith(self, prefix: str) -> bool:
        for i in self.stack:
            s=str(i)
            if s.startswith(prefix):
                return True
        return False
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        

        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
