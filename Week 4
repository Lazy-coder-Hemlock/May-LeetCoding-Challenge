
#sort characters by frequency

class Solution:
    def frequencySort(self, s: str) -> str:
        l=collections.Counter(s).most_common(len(s))
        res=""
        for i in range(len(l)):
            key=collections.Counter(s).most_common(len(l))[i][0]
            value=collections.Counter(s).most_common(len(l))[i][1]
            r=key*value
            res+=r
        return res


#Interval list Intersections
class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        int first=0;
        int second=0;
        int f_size=A.size();
        int s_size=B.size();
        vector<vector<int>>res;
        while(first<f_size && second<s_size){
            if(A[first][1]>=B[second][0] && A[first][0]<=B[second][1]){
                int ele=max(A[first][0],B[second][0]);
                int ele2=min(A[first][1],B[second][1]);
                    res.push_back({ele,ele2});
            }
            if(A[first][1]>B[second][1])
                second++;
            else
                first++;
        }
        return res;
    }
};


#construct binary search tree from preorder traversal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode *create(TreeNode *root,int ele){
        if(!root)
            return root=new TreeNode(ele);
        if(root->val>ele)
            root->left=create(root->left,ele);
        else
            root->right=create(root->right,ele);
        return root;
    }
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
    TreeNode *root=NULL;
        for(auto x:preorder)
            root=create(root,x);
        return root;
    }
};

