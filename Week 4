
#sort characters by frequency

class Solution:
    def frequencySort(self, s: str) -> str:
        l=collections.Counter(s).most_common(len(s))
        res=""
        for i in range(len(l)):
            key=collections.Counter(s).most_common(len(l))[i][0]
            value=collections.Counter(s).most_common(len(l))[i][1]
            r=key*value
            res+=r
        return res


#Interval list Intersections
class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        int first=0;
        int second=0;
        int f_size=A.size();
        int s_size=B.size();
        vector<vector<int>>res;
        while(first<f_size && second<s_size){
            if(A[first][1]>=B[second][0] && A[first][0]<=B[second][1]){
                int ele=max(A[first][0],B[second][0]);
                int ele2=min(A[first][1],B[second][1]);
                    res.push_back({ele,ele2});
            }
            if(A[first][1]>B[second][1])
                second++;
            else
                first++;
        }
        return res;
    }
};


#construct binary search tree from preorder traversal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode *create(TreeNode *root,int ele){
        if(!root)
            return root=new TreeNode(ele);
        if(root->val>ele)
            root->left=create(root->left,ele);
        else
            root->right=create(root->right,ele);
        return root;
    }
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
    TreeNode *root=NULL;
        for(auto x:preorder)
            root=create(root,x);
        return root;
    }
};

#uncrossed lines

class Solution {
public:
    int maxUncrossedLines(vector<int>& A, vector<int>& B) {
     int m=A.size();
        int n=B.size();
        int dp[m+1][n+1];
        memset(dp,0,sizeof(dp));
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++)
            if(A[i-1]==B[j-1])
                dp[i][j]=dp[i-1][j-1]+1;
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        return dp[m][n];
    }
};

#contiguous array


class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        d={}
        sum=0
        sub=0
        for i in range(len(nums)):
            if nums[i]==0:
                sum+=-1
            elif nums[i]==1:
                sum+=1
            if sum==0:
                sub=i+1
            if sum in d:
                sub=max(sub,i-d[sum])
            else:
                d[sum]=i
        return sub

#possible bipartition
class Solution {
    bool isBipartite(vector<vector<int>>& adj,int N,int node,vector<int>& color)
    {
        queue<int> q;
        q.push(node);
        color[node] = 1;
        //Process current graph component using BFS
        while(!q.empty())
        {
            int curr = q.front();
            q.pop();
            for(int ele: adj[curr])
            {
                if(color[ele]==color[curr]) //Odd-cycle
                    return false;
                if(color[ele]==-1)  //Unvisited node
                {
                    color[ele] = 1-color[curr];
                    q.push(ele);
                }
            }
        }
        return true;
    }
public:
    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
        vector<vector<int>> adj(N+1);
        for(int i=0;i<dislikes.size();++i)
        {
            adj[dislikes[i][0]].push_back(dislikes[i][1]);
            adj[dislikes[i][1]].push_back(dislikes[i][0]);
        }
        
        vector<int> color(N+1,-1);
        for(int i=1;i<=N;++i)
            if(color[i]==-1)
                if(!isBipartite(adj,N,i,color))
                    return false;
        return true;
    }
};

#counting bits
class Solution:
    def countBits(self, num: int) -> List[int]:
        return [bin(i)[2:].count('1') for i in range(num+1)]
